#!/usr/local/bin/python3

import serial
import sys
import time
import os
#import fdpexpect
import pexpect.fdpexpect
import pexpect
import socket
import shutil
import subprocess
from time import gmtime, strftime

showtime = strftime("%Y-%m-%d %H:%M:%S", gmtime())
#syntax

print str(showtime) + "\t Test UDP Tunnel"
print str(showtime) + "\t ==============="

def script_usage():
 print("Usage: " + os.path.basename(sys.argv[0]) + " <serial_port>" + " <baudrate>" + " <databits>" + " <parity>" + " <stopbits>"  +  " <device_ip>"  + " <tunnel_port> " +  " <udp mode>"  +  " <socket bind> " + " <udp tunnel mode> "  + "<network>")
 return

if len(sys.argv) < 11:
    script_usage()
    sys.exit()

#NOTE: RUN THE SCRIPT AS LTRXENGR AND NOT ROOT

serial_port = sys.argv[1]
baudrate = sys.argv[2]
databits = sys.argv[3]
parity = sys.argv[4]
stopbits = sys.argv[5]
device_ip = sys.argv[6]
tunnel_port = sys.argv[7]
udp_mode = sys.argv[8] #values restricted or unrestricted
socketbind = sys.argv[9] # values: 1 or 0. if udptunnel is passive,socket bind is always 1 
udptunnel = sys.argv[10] #values: active or passive
network = sys.argv[11]

script_path = "/home/lantronix/MIDAS/xml/"
print network

def udpTunnel (udpmode, sbind): # device initiates the connection
 ser = serial.Serial(serial_port, '{0}'.format(baudrate), timeout=0, parity='{0}'.format(parity), stopbits = int('{0}'.format(stopbits)), bytesize = int('{0}'.format(databits)), rtscts = True)
 childid = pexpect.fdpexpect.fdspawn(ser)
 ser.close()
 ser.open()
 time.sleep(5)
 tun_port = int(tunnel_port)
 #pexpect.run('nc -v -u -n device_ip 50001')
 sock = socket.socket(socket.AF_INET, # Internet
                         socket.SOCK_DGRAM) # UDP
 sock.settimeout(20)
 sock1 = socket.socket(socket.AF_INET, # Internet
                         socket.SOCK_DGRAM) # UDP
 sock1.settimeout(20)
 z = "HELLO WORLD"
 pexpect.run('rm udpdata')
 result = 0
 result1 = 0
 result2 = 0
 result3 = 0
 UDP_IP = '192.168.51.25'
 UDP_PORT = 50001
 UDP_PORT1 = 60001
 UDP_PORT = int(UDP_PORT)
 UDP_PORT1 = int(UDP_PORT1)
 if (sbind == '1'):
  sock.bind((UDP_IP,UDP_PORT))
  sock1.bind((UDP_IP,UDP_PORT1))
 if ser.isOpen():
   ser.flushInput()
   ser.flushOutput()
   print 'serial opened'
   #time.sleep(5)
   print "Testing UDP",udptunnel
   ser.write('a\r')
   time.sleep(5)
  
   if (udptunnel == 'active'): 
    if (sbind == '1'):
     data = sock.recv(10)
     print "data is",data

   if (udptunnel == 'passive'): 
    try:
     if (sbind == '1'):
      data = sock.recv(10)
      print "data is",data
    except Exception as e:
     result1 = 1
     print(str(e))
 
   sock.sendto(z, (device_ip, tun_port))
   time.sleep(60)
   if (udptunnel == 'passive'):
    data = sock.recv(10)
    print "data is", data
    if (data == 'a'):
     result2 = 1
     
   for x in range (0,len(z)):
    serdata = ser.read()
    print "serial data is",serdata
    fudp = open('udpdata','a')
    fudp.write(serdata)
    fudp.close()
   time.sleep(5)
   fudpsize = os.path.getsize("udpdata")

   if (udptunnel == 'passive'): 
    sock1.sendto(z, (device_ip, tun_port))
    time.sleep(60)
    for x in range (0,len(z)):
     serdata1 = ser.read()
     fudp = open('udpdata','a')
     fudp.write(serdata1)
     fudp.close()
     time.sleep(5)  
     print "serial data is",serdata1
     fudpsize = os.path.getsize("udpdata")
     print fudpsize
     if (udpmode == 'unrestricted') and (fudpsize == len(z) * 2):
      result3 = 1
     elif (udpmode == 'restricted') and (serdata1 == ""):
       result3 = 1
      
   sock.close()
   ser.close()
   time.sleep(5)

#udp tunnel active result
   if (udptunnel == 'active'):

    if (udpmode == 'unrestricted') and (sbind == '1'):
     if (fudpsize == len(z)) and (data == 'a'):
       print str(showtime) + "\t udp tunnel active unrestricted mode: data sent through UDP tunnel.test passed"
       result = 1

    if (udpmode == 'unrestricted') and (sbind == '0'):
     if (fudpsize == len(z)):
      print str(showtime) + "\t udp tunnel active unrestricted mode: data sent through UDP tunnel.test passed"
      result = 1
 
    if (udpmode == 'restricted') and (sbind == '0'):
     if (fudpsize == 0):
      print str(showtime) + "\t udp tunnel active restricted mode: data discarded. test passed"
      result = 1

    if (udpmode == 'restricted') and (sbind == '1'):
     if (fudpsize == len(z)) and (data == 'a'):
      print str(showtime) + "\t restricted mode: udp data received. test passed"
      result = 1
    
#udp tunnel passive result
   if (udptunnel == 'passive'):
    print result1
    print result2
    print result3
    #if (sbind == '1') and (udpmode == 'unrestricted'):
    if (result1 == 1) and (result2 == 1) and (result3 == 1):
      #if (fudpsize == len(z) * 2):
       print "udp tunnel passive mode test case passed",udpmode
       result = 1

    #if (sbind == '1') and (udpmode == 'restricted'):
     #if (result1 == 1) and  (result2 == 1) and (result3 == 1):
      #print "udp tunnel passive restricted mode test case passed"     
    #  result = 1
      
 print "result is:",result
 return result

def device_config():
  print str(showtime) + "\t configure device"
  telnet_config = pexpect.run("curl --anyauth -u admin:PASSWORD http://"+device_ip+"/import/config -X POST --form  configrecord=@"+script_path+"telnet.xml")
  print str(showtime) + "\t enabled telnet ........"
  time.sleep(20)
  clientid = pexpect.spawn('telnet '+device_ip)
  clientid.sendline('status\r')
  clientid.expect('status')
  clientid.sendline('device\r')
  clientid.expect('status Device')
  clientid.sendline('reboot')
  clientid.expect('okay/cancel')
  clientid.sendline('okay\r')
  print ("Rebooting")
  #clientid.expect('Rebooting')
  time.sleep(50)
  print str(showtime) + "\t configuring device"
  clientid = pexpect.spawn('telnet '+device_ip)
  time.sleep(5)
  clientid.sendline('config\r')
  clientid.expect('config')
  clientid.sendline('line host_cdc_acm')
  time.sleep(3)
  print str(showtime) + "\t line host_acm"
  clientid.expect('config Line')
  clientid.sendline('baud rate {0}'.format(baudrate))
  clientid.expect('config Line')
  clientid.sendline('data bits {0}'.format(databits))
  clientid.expect('config Line')
  clientid.sendline('parity {0}'.format(parity))
  clientid.expect('config Line')
  clientid.sendline('stop bits {0}'.format(stopbits))
  clientid.expect('config Line')
  clientid.sendline('flow control hardware\r')
  clientid.expect('config Line')
  clientid.sendline('protocol tunnel\r')
  clientid.expect('config Line')
  clientid.sendline('exit\r')
  clientid.expect('config')
  clientid.sendline('tunnel host_cdc_acm\r')
  clientid.expect('config Tunnel')
  clientid.sendline('connect\r')
  clientid.expect('config Tunnel')
  clientid.sendline('host 1\r')
  clientid.sendline('protocol udp\r')
  clientid.sendline('address 192.168.51.25')
  #clientid.expect('config Tunnel Connect')
  if (udp_mode == 'restricted'):
    clientid.sendline('reception restricted\r')
  elif (udp_mode == 'unrestricted'):
    clientid.sendline('reception unrestricted\r')
  clientid.expect('config Tunnel')
  if (udptunnel == 'passive'):
   if network == 'eth0':
    clientid.sendline('address eth0\r')
    clientid.expect('config Tunnel')
   elif network == 'wlan0':
    clientid.sendline('address wlan0\r')
    clientid.expect('config Tunnel')
  clientid.sendline('port 50001\r')
  clientid.expect('config Tunnel')
  if (udptunnel == 'passive'):
   clientid.sendline('port <none>\r')
   clientid.expect('config Tunnel')
  clientid.sendline('exit\r')
  clientid.expect('config Tunnel')
  clientid.sendline('local port 10002\r')
  clientid.expect('config Tunnel')
  clientid.sendline('mode any char\r')
  clientid.expect('config Tunnel')
  clientid.sendline('exit\r')
  if (udptunnel == 'passive'):
   clientid.sendline('disconnect\r')
   clientid.sendline('timeout 90000')
  clientid.sendline('exit\r')
  clientid.expect('config Tunnel')
  clientid.sendline('exit\r')
  clientid.expect('config')
  clientid.sendline('write\r')
  clientid.expect('config')
  clientid.sendline('exit\r')
  clientid.expect('>')
  clientid.close()
  result = udpTunnel(udp_mode, socketbind)
  print result
  if (result == 1):
   print str(showtime) + "\t TEST CASE PASSED"
  else:
   print str(showtime) + "\t TEST CASE FAILED"
  #udptunnel(filename)
  clientid = pexpect.spawn('telnet '+device_ip) 
  clientid.sendline('config\r')
  clientid.expect('config')
  clientid.sendline('tunnel host_cdc_acm')
  clientid.expect('config Tunnel')
  clientid.sendline('connect')
  clientid.expect('config Tunnel')
  clientid.sendline('mode disable\r')
  time.sleep(2)
  #clientid.expect('okay/cancel')
  clientid.sendline('okay\r')
  time.sleep(3)
  clientid.expect('config Tunnel')
  clientid.sendline('exit\r')
  clientid.sendline('disconnect\r')
  clientid.sendline('timeout <disabled>\r')
  clientid.sendline('exit\r')
  clientid.sendline('exit\r')
  clientid.expect('config')
  clientid.sendline('write\r')
  clientid.expect('config')
  clientid.sendline('exit\r')
  clientid.expect('>')

# main program
device_config()

sys.exit()
